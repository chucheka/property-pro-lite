{
	"swagger": "2.0",
	"info": {
	  "description": "Property Pro Lite is an online app where users can create and/or search property for sale or rent.",
	  "version": "1.0.0",
	  "title": "Property Pro Lite",
	  "termsOfService": "http://swagger.io/terms/",
	  "contact": {
		"email": "ryanucheka@gmail.com"
	  },
	  "license": {
		"name": "MIT",
		"url": "https://opensource.org/licenses/MIT"
	  }
	},
	"host": "propertypro-lite.herokuapp.com",
	"basePath": "/api/v1",
	"tags": [
	  {
		"name": "auth"
	  },
	  {
		"name": "property"
	  }
	],
	"schemes": [
	  "https",
	  "http"
	],
	"consumes": [
	  "application/x-www-form-urlencoded",
	  "application/json"
	],
	"produces": [
	  "application/json"
	],
	"securityDefinitions": {
	  "Bearer": {
		"type": "apiKey",
		"name": "Authorization",
		"in": "header"
	  }
	},
	"paths": {
	  "/auth/signup": {
		"post": {
		  "tags": [
			"auth"
		  ],
		  "summary": "Registers a new user",
		  "description": "Allows new user to create an account",
		  "operationId": "signup",
		  "consumes": [
			"application/json"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "user",
			  "description": "User object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/User"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Account created successfully",
			  "schema": {
				"$ref": "#/definitions/UserSignupRes"
			  },
			  "headers": {}
			},
			"409": {
			  "description": "User already exist",
			  "schema": {
				"$ref": "#/definitions/UserExists"
			  }
			}
		  }
		}
	  },
	  "/auth/signin": {
		"post": {
		  "tags": [
			"auth"
		  ],
		  "summary": "Allows registered user to signin",
		  "description": "Signs user in",
		  "operationId": "signin",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "Created user object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/UserSignin"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "You have successfully logged in",
			  "schema": {
				"$ref": "#/definitions/UserSignedinResp"
			  },
			  "headers": {}
			},
			"400": {
			  "description": "Bad Request",
			  "schema": {
				"$ref": "#/definitions/BadRequest"
			  }
			},
			"404": {
			  "description": "User does not exists",
			  "schema": {
				"$ref": "#/definitions/UserNotFound"
			  }
			}
		  }
		}
	  },
	  "/property": {
		"post": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user create property advert",
		  "description": "Allows the user(agent) to create property advert",
		  "operationId": "createAdvert",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "Created property object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Property"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "You have successfully logged in",
			  "schema": {
				"$ref": "#/definitions/PropertyCreatedResp"
			  },
			  "headers": {}
			},
			"400": {
			  "description": "Failure in creating property",
			  "schema": {
				"$ref": "#/definitions/PropertyNotCreated"
			  }
			}
		  }
		}
	  },
	  "/property/property_id": {
		"post": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user to update property advert",
		  "description": "Allows the user(agent) to update property advert",
		  "operationId": "updateAdvert",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "update property object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Property"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "You have successfully updated your property advert",
			  "schema": {
				"$ref": "#/definitions/UpdatePropertyResp"
			  },
			  "headers": {}
			},
			"400": {
			  "description": "Failure in creating property",
			  "schema": {
				"$ref": "#/definitions/PropertyNotUpdated"
			  }
			}
		  }
		}
	  },
	  "/property/property_id/sold": {
		"patch": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user to mark property advert as sold",
		  "description": "Allows the user(agent) to mark property advert as sold",
		  "operationId": "markSold",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "status property key/value pair",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/propertyStatus"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "You have successfully marked your property advert sold",
			  "schema": {
				"$ref": "#/definitions/MarkPropertySoldResp"
			  },
			  "headers": {}
			},
			"400": {
			  "description": "Failure in creating property",
			  "schema": {
				"$ref": "#/definitions/BadRequest"
			  }
			}
		  }
		}
	  },
	  "/property/:property_id": {
		"delete": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user(agent) to delete property advert",
		  "description": "Allows the user(agent) to delete property advert",
		  "operationId": "deleteAdvert",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "PropertyI property advert",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Property"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Property advert successfully deleted",
			  "schema": {
				"$ref": "#/definitions/DeletePropertyResp"
			  },
			  "headers": {}
			},
			"404": {
			  "description": "delete property with wrong or non-existent propertyId",
			  "schema": {
				"$ref": "#/definitions/CannotDeleteProperty"
			  }
			}
		  }
		}
	  },
	  "/property/properties": {
		"get": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user(agent) to get all properties advert",
		  "description": "Allows the user(agent) to get all property advert",
		  "operationId": "allAdverts",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "property data object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Property"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "All property adverts successfully fetched",
			  "schema": {
				"$ref": "#/definitions/GetAllPropertyResp"
			  },
			  "headers": {}
			},
			"404": {
			  "description": "delete property with wrong or non-existent propertyId",
			  "schema": {
				"$ref": "#/definitions/GetNoProperties"
			  }
			}
		  }
		}
	  },
	  "/property/propertyId": {
		"get": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user(agent) to get all properties of specific type",
		  "description": "Allows the user(agent) to get all property of specific type",
		  "operationId": "specificAdverts",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "urlencoded data for property type",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Property"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Property of specific type successfully fetched",
			  "schema": {
				"$ref": "#/definitions/GetSpecificProperty"
			  },
			  "headers": {}
			},
			"404": {
			  "description": "delete property with wrong or non-existent propertyId",
			  "schema": {
				"$ref": "#/definitions/NoPropertyOfSpecificType"
			  }
			}
		  }
		}
	  },
	  "/property/:propertyId": {
		"get": {
		  "tags": [
			"property"
		  ],
		  "summary": "Allows user(agent) to get a specific property with propertyId",
		  "description": "Allows user(agent) to get a specific property with",
		  "operationId": "propertyIdProperty",
		  "produces": [
			"application/json"
		  ],
		  "consumes": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "body",
			  "in": "body",
			  "description": "propertyId of property advert",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Property"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Property of specific property with propertyId",
			  "schema": {
				"$ref": "#/definitions/GetSpecificProperty"
			  },
			  "headers": {}
			},
			"404": {
			  "description": "delete property with wrong or non-existent propertyId",
			  "schema": {
				"$ref": "#/definitions/NoPropertyWithPropertyId"
			  }
			}
		  }
		}
	  }
	},
	"definitions": {
	  "User": {
		"title": "signUp",
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "integer"
			  },
			  "email": {
				"type": "string"
			  },
			  "first_name": {
				"type": "string"
			  },
			  "last_name": {
				"type": "string"
			  },
			  "password": {
				"type": "string"
			  },
			  "phoneNumber": {
				"type": "string"
			  },
			  "address": {
				"type": "string"
			  },
			  "is_admin": {
				"type": "boolean"
			  }
			}
		  }
		}
	  },
	  "UserSignupRes": {
		"title": "UserSignupRes",
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "token": {
				"type": "string"
			  },
			  "id": {
				"type": "integer",
				"format": "int64"
			  },
			  "first_name": {
				"type": "string"
			  },
			  "last_name": {
				"type": "string"
			  },
			  "email": {
				"type": "string"
			  },
			  "phoneNumber": {
				"type": "integer"
			  },
			  "address": {
				"type": "string"
			  },
			  "is_admin": {
				"type": "boolean"
			  }
			}
		  }
		}
	  },
	  "UserSignin": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "token": {
				"type": "string"
			  },
			  "id": {
				"type": "integer"
			  },
			  "first_name": {
				"type": "string"
			  },
			  "last_name": {
				"type": "string"
			  },
			  "email": {
				"type": "string"
			  },
			  "phoneNumber": {
				"type": "integer"
			  },
			  "address": {
				"type": "string"
			  },
			  "is_admin": {
				"type": "boolean"
			  }
			}
		  }
		}
	  },
	  "UserSignedinResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "token": {
				"type": "integer"
			  },
			  "id": {
				"type": "integer"
			  },
			  "first_name": {
				"type": "string"
			  },
			  "last_name": {
				"type": "string"
			  },
			  "email": {
				"type": "string"
			  },
			  "address": {
				"type": "string"
			  },
			  "is_admin": {
				"type": "boolean"
			  }
			}
		  }
		}
	  },
	  "UserNotFound": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string"
		  },
		  "error": {
			"type": "string",
			"example": "Not registered"
		  }
		}
	  },
	  "Property": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "integer"
		  },
		  "owner": {
			"type": "integer"
		  },
		  "status": {
			"type": "string"
		  },
		  "price": {
			"type": "number"
		  },
		  "state": {
			"type": "string"
		  },
		  "city": {
			"type": "string"
		  },
		  "address": {
			"type": "string"
		  },
		  "created_on": {
			"type": "string"
		  },
		  "image_url": {
			"type": "string"
		  }
		}
	  },
	  "PropertyCreatedResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "integer"
			  },
			  "status": {
				"type": "string"
			  },
			  "type": {
				"type": "string"
			  },
			  "state": {
				"type": "string"
			  },
			  "city": {
				"type": "string"
			  },
			  "address": {
				"type": "string"
			  },
			  "price": {
				"type": "number"
			  },
			  "created_on": {
				"type": "string"
			  },
			  "image_url": {
				"type": "string"
			  }
			}
		  }
		}
	  },
	  "PropertyNotCreated": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string",
			"example": "Could not create property"
		  }
		}
	  },
	  "propertyStatus": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "sold"
		  }
		}
	  },
	  "PropertyNotUpdated": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string",
			"example": "Could not update property"
		  }
		}
	  },
	  "UpdatePropertyResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "succes"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "integer"
			  },
			  "status": {
				"type": "string"
			  },
			  "type": {
				"type": "string"
			  },
			  "state": {
				"type": "string"
			  },
			  "city": {
				"type": "string"
			  },
			  "address": {
				"type": "string"
			  },
			  "price": {
				"type": "number"
			  },
			  "created_on": {
				"type": "string"
			  },
			  "image_url": {
				"type": "string"
			  }
			}
		  }
		}
	  },
	  "MarkPropertySoldResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "succes"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "integer"
			  },
			  "status": {
				"type": "string"
			  },
			  "type": {
				"type": "string"
			  },
			  "state": {
				"type": "string"
			  },
			  "city": {
				"type": "string"
			  },
			  "address": {
				"type": "string"
			  },
			  "price": {
				"type": "number"
			  },
			  "created_on": {
				"type": "string"
			  },
			  "image_url": {
				"type": "string"
			  }
			}
		  }
		}
	  },
	  "DeletePropertyResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "message": {
				"type": "string",
				"example": "Property advert has been deleted"
			  }
			}
		  }
		}
	  },
	  "CannotDeleteProperty": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string",
			"example": "Invalid propertyId"
		  }
		}
	  },
	  "GetAllPropertyResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "array",
			"items": {
			  "type": "object",
			  "properties": {
				"id": {
				  "type": "integer"
				},
				"status": {
				  "type": "string"
				},
				"type": {
				  "type": "string"
				},
				"state": {
				  "type": "string"
				},
				"city": {
				  "type": "string"
				},
				"address": {
				  "type": "string"
				},
				"price": {
				  "type": "number"
				},
				"created_on": {
				  "type": "string"
				},
				"image_url": {
				  "type": "string"
				},
				"ownerEmail": {
				  "type": "string"
				},
				"ownerPhoneNumber": {
				  "type": "string"
				}
			  }
			}
		  }
		}
	  },
	  "GetNoProperties": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "error": {
			"type": "string",
			"example": "No property adverts"
		  }
		}
	  },
	  "GetPropertySpecificTypeResp": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "success"
		  },
		  "data": {
			"type": "array",
			"items": {
			  "type": "object",
			  "properties": {
				"id": {
				  "type": "integer"
				},
				"status": {
				  "type": "string"
				},
				"type": {
				  "type": "string"
				},
				"state": {
				  "type": "string"
				},
				"city": {
				  "type": "string"
				},
				"address": {
				  "type": "string"
				},
				"price": {
				  "type": "number"
				},
				"created_on": {
				  "type": "string"
				},
				"image_url": {
				  "type": "string"
				},
				"ownerEmail": {
				  "type": "string"
				},
				"ownerPhoneNumber": {
				  "type": "string"
				}
			  }
			}
		  }
		}
	  },
	  "NoPropertyOfSpecificType": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string",
			"example": "No property list under this type of property"
		  }
		}
	  },
	  "GetSpecificProperty": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "succes"
		  },
		  "data": {
			"type": "object",
			"properties": {
			  "id": {
				"type": "integer"
			  },
			  "status": {
				"type": "string"
			  },
			  "type": {
				"type": "string"
			  },
			  "state": {
				"type": "string"
			  },
			  "city": {
				"type": "string"
			  },
			  "address": {
				"type": "string"
			  },
			  "price": {
				"type": "number"
			  },
			  "created_on": {
				"type": "string"
			  },
			  "image_url": {
				"type": "string"
			  },
			  "ownerEmail": {
				"type": "string"
			  },
			  "ownerPhoneNumber": {
				"type": "string"
			  }
			}
		  }
		}
	  },
	  "NoPropertyWithPropertyId": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string"
		  },
		  "error": {
			"type": "string",
			"example": "Property with propertyId doesn't exist"
		  }
		}
	  },
	  "UserExists": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string",
			"example": "Email already taken"
		  }
		}
	  },
	  "UserDoesNotExist": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string",
			"example": "Incorrect email or password.Sign up instead. "
		  }
		}
	  },
	  "BadRequest": {
		"type": "object",
		"properties": {
		  "status": {
			"type": "string",
			"example": "error"
		  },
		  "error": {
			"type": "string"
		  }
		}
	  }
	}
  }